#Day5 Of 100daysOfCode - 

  
MySQL and introduction to JDBC-  



Pre-Requisite
+++++++++++++
a. Core java concepts like (interface,polymorphism,Exception handling and
Collections)
b. Basics of MySQL(covered live) 



JEE- Target 
+++
1. Making Java application communicate with database using JDBC-API.
2. Building webapplications using Servlet and JSP by following an architecture
called "MVC".
3. Sample project of webapplication (StudentRelationship Manager application).
++++++++++++++++++++++++++++++++++




Introduction to Database Concepts
++++++++++++++++++++++++++++++++++
1. Understand what is Data, Database,Database Management System

Data -> Information about any real world object
eg:
Chairs,Tables,Mobiles,Computers,Laptop,Student,Employee,Customer,....

Example : If we are considering the college management System of students.
Student

RollNo,Name,Branch,Gender,Age (Data -> It is something particular about one student)

Database -> Grouping the data in structured format (or) Grouping of Several students information

Student-1
Rollo: 10
Name : sachin
Branch: CSE
Gender: Male
Age: 28

Student-2
Rollo: 7
Name : dhoni
Branch: ECE
Gender: Male
Age: 27

Student-3
Rollo: 18
Name : Kohli
Branch: EEE
Gender: Male
Age: 27 


Database Management Systems(DBMS)

=> It is a technique for Storing and Retreiving the information from Database.
In this Digital Era(Or) In our Day-2-Day Life we are seeing lot of applications
such as
naukri portal,monster portal, Flipkart,Amazon,Myntra, Pwskills portal etc...
End User will interact with the application,Application will be connected to the
Server and Gets the data from the Database server.
++++++++++++++++++++++++++++++++++++++++



Various Techniques for Managing the Data
++++++++++++++++++++++++++++++++++++++++


a. Traditional Apporach
a. Books
b. Ledger Books
C. Collection of Pages
d. Each Page


Problems
a. Security Challenge
b. BackUp Issues
c. Space Issue
d. Costly
e. TimeConsuming for Retrieving particular student information.


In early 1940's Computers were discoverd and people are thinking to store this kind  of information in computer
After discovering the computer the people are managing the data in the form of Files(or) FileSystem (or) Flat File.

Problems
a. Security Challenges
b. DataRedundancy (Duplication of Data or Repetative Data)
c. Data Inconsistency(Trying to update StudentId in one file, we may forget to update in another file)
d. TimeConsuming for Retrieving information from Files(or) FileSystem(or) Flat Files.
e. We can't maintain the backup of files.
f. We can Store limited infomration or limited amount of information in files.


++++++++++++++++++
Database Softwares
++++++++++++++++++

-> Currently in market we ar managing the data of an application in Database Softwares.

Advantages
a. Strong Security(Username and Password)
b. Managing and Storing, Retrieving the information.
c. We can store huge amount of information in database.
d. We can maintain the data in database in the Structured format(Tables
---> Rows and Columns) 

Rule::
Table >> RealWorld Entity >> Student
Columns>> Fields >> RollNo,Name,Branch,GenderRows >> Values >> 10,Sachin,CSE,MALE 

e. No Data Redundancy
f. Data Integrity
g. Associations(1*1, 1*M,M*1,M*M)



Database Softwares

a. Oracle Database >> Oracle Corporation >> Propertiary Licencse
b. MySQL Database >> Oracle Corpoartation >> Open Source
c. DB2 Database >> IBM Corporation
d. SQL Server Database >> Microsoft Corporation
e. Derby Database >> SUNMS
The above mentioned database softwares comes under "RDBS Database Software".


MySQL installation
==================

1. Open browser of your choice
2. Go to the following link https://dev.mysql.com/downloads/installer/
3. Scroll down and choose the operating system click on 2nd link for downloading the software.
4. Double click on the set up file and complete the installation(with just next,next clicks and provider the password as ::root123,default                  u    username is :: root)

5. After installation check for mysql,if properly installed provide the password to login to MySQLDatabase.

SQL
=> It stands for Structured Query Language
=> This language is used by DBA to interact with the database software.


Syntax for Creating a Database
++++++++++++++++++++++++++++++

mysql> CREATE DATABASE PWSKILLSBATCH
Query OK, 1 row affected (0.03 sec)

Syntax for Using a Database
+++++++++++++++++++++++++++
mysql> USE PWSKILLSBATCH
Database changed

Syntax for Performing operations
++++++++++++++++++++++++++++++++
a. DML => Data Manipulation Language eg: insert,update,delete
b. DDL => Data Defnition Language eg: create,alter,drop
c. DRL => Data Retrieval Language eg: select
d. TCL => Transaction Control Language eg: commit,rollback,savepoint 


DDL
These commands refers to performing specific operation on the database or an atable
eg:: Creating a database, dropping a database, creating a table, dropping a table, altering column name of table, altering datatype of column in      a      table  dropping a column in a datatabase,.......

Drop a database
+++++++++++++++
mysql> drop database pwskillsbatch;
Query OK, 0 rows affected (0.03 sec)

Creating a table inside a database
++++++++++++++++++++++++++++++++++
Syntax:: CREATE TABLE tablename (columname datatype, ,.......);
mysql> create database pwskillsbatch;
Query OK, 1 row affected (0.02 sec)

mysql> use pwskillsbatch;
Database changed

mysql> create table student(sid int,sname varchar(20),sage int,saddressvarchar(20)); 

Query OK, 0 rows affected (0.02 sec)


mysql> show tables;
+-------------------------+
| Tables_in_pwskillsbatch |
+-------------------------+
| student |
+-------------------------+
1 row in set (0.00 sec) 


mysql> describe student;
+----------+-------------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| sid | int | YES | | NULL | |
| sname | varchar(20) | YES | | NULL | |
| sage | int | YES | | NULL | |
| saddress | varchar(20) | YES | | NULL | |
+----------+-------------+------+-----+---------+-------+
4 rows in set (0.02 sec)
++++++++++++++++++++++++++++++++++++++++++++++ 


Syntax for Inserting Single record into table
++++++++++++++++++++++++++++++++++++++++++++++
Syntax :: INSERT INTO tbl_name (columnames1,columnnames2,....)
VALUES(value1,value2,.....);
mysql> insert into student(sid,sname,sage,saddress) values(10,'sachin',50,'IND');
Query OK, 1 row affected (0.03 sec)
+++++++++++++++++++++++++++++++++++++++++++++++



Syntax for Inseting Multiple records into table
+++++++++++++++++++++++++++++++++++++++++++++++
Syntax :: INSERT INTO tbl_name(columnanems1,columnnames2,...) values (),(),();mysql> insert into student(sid,sname,sage,saddress) values(7,'dhoni',44,'IND'),
(9,'lara',51,'WI'),(14,'ponting',48,'AUS');
Query OK, 3 rows affected (0.02 sec)
Records: 3 Duplicates: 0 Warnings: 0
++++++++++++++++++++++++++++++++++++++++++++




Syntax for Retrieving record from the table
+++++++++++++++++++++++++++++++++++++++++++
Syntax :: select columnames1,columnnames2,... from tbl_name where column_name = value;

eg#1.
mysql> select sid,sname,sage,saddress from student;
+------+--------+------+----------+
| sid | sname | sage | saddress |
+------+--------+------+----------+
| 10 | sachin | 50 | IND |
+------+--------+------+----------+
1 row in set (0.00 sec)

eg#2.
mysql> select * from student;
+------+---------+------+----------+
| sid | sname | sage | saddress |
+------+---------+------+----------+
| 10 | sachin | 50 | IND |
| 7 | dhoni | 44 | IND |
| 9 | lara | 51 | WI |
| 14 | ponting | 48 | AUS |
+------+---------+------+----------+
4 rows in set (0.00 sec)

eg#3.
mysql> select sid,sname,sage,saddress from student where sid = 10;
+------+--------+------+----------+
| sid | sname | sage | saddress |
+------+--------+------+----------+
| 10 | sachin | 50 | IND |
+------+--------+------+----------+
1 row in set (0.01 sec)


eg#4.
mysql> select sid,sname,sage,saddress from student where sid = 15;
Empty set (0.00 sec)
++++++++


JDBC API
++++++++
=> It is an API given by SUNMS to interact with the database.
=> To interact with the database SUNMS had given a jar called rt.jar which is available for the programmer during the installation of jdk s/w.
=> To use JDBC in java program we take the support of a package called "java.sql.*" and "javax.sql.*".
=> API refers to set of rules and guideliness which has interfaces.
=> To get the implementation for these interface abstract methods we need to take the help of "DB-Vendor".
=> DB-Vendor will give the implementation for "SRS" and release those implementation classes in the form of "jars" to the javadevelop community people.
=> Depending upon the database we use in our project we need to use the respective
jars supplied by "DB-Vendor". 










#Day6 of 100daysOfCode 


JDBC API
++++++++
=> It is an API given by SUNMS to interact with the database.
=> To interact with the database SUNMS had given a jar called rt.jar which is available for the programmer during the installation of jdk s/w.
=> To use JDBC in java program we take the support of a package called "java.sql.*" and "javax.sql.*".
=> API refers to set of rules and guideliness which has interfaces.
=> To get the implementation for these interface abstract methods we need to take the help of "DB-Vendor".
=> DB-Vendor will give the implementation for "SRS" and release those implementation classes in the form of "jars" to the javadevelop community people.
=> Depending upon the database we use in our project we need to use the respective
jars supplied by "DB-Vendor". 





++++++++++++++++++++++++++++++++++++++++++++++
Steps given by SUNMS to interact with Database
++++++++++++++++++++++++++++++++++++++++++++++

1. Load and register the driver
2. Establish the Connection
3. Create Statement/PreparedStatement/CallableStatement to transfer the query.
4. Execute the query
5. Process the result
6. close the resources
7. Handle SQLExceptions if it occurs. 




To execute select Query we need to use

public ResultSet executeQuery(String sqlQuery) throws SQLException

To execute non-select query like insert,update,delete we need to use 

public int executeUpdate(String sqlNonSelectQuery) throws SQLException 

+++++++++++++++++++++++++++
Code to execute SelectQuery
+++++++++++++++++++++++++++ 

package in.pwskills.main;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class TestApp {
  public static void main(String[] args) throws ClassNotFoundException,SQLException {
    
           // load and register the driver
Class.forName("com.mysql.cj.jdbc.Driver");
// Establish the Connection
String url = "jdbc:mysql://localhost:3306/pwskillsbatch";
String user = "root";
String password = "root123";
Connection connection = DriverManager.getConnection(url, user,
password);
// Create a Statement object
Statement statement = connection.createStatement();
// Execute the query
String sqlSelectQuery = "select sid,sname,sage,saddress from student";
ResultSet resultSet = statement.executeQuery(sqlSelectQuery);
System.out.println("SID\tSNAME\tSAGE\tSADDRESS");
// Process the resultSet
while (resultSet.next()) {
System.out.println(resultSet.getInt(1) + "\t" +
resultSet.getString(2) + "\t" + resultSet.getInt(3) + "\t"
+ resultSet.getString(4));
}
//close the resources
resultSet.close();
statement.close();
connection.close();
}
}
+++++++++++++++++++++++++++
Code to execute InsertQuery
+++++++++++++++++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
public class TestApp {
public static void main(String[] args) throws ClassNotFoundException,
SQLException {
// load and register the driver
Class.forName("com.mysql.cj.jdbc.Driver");
// Establish the Connection
String url = "jdbc:mysql://localhost:3306/pwskillsbatch";
String user = "root";
String password = "root123";
Connection connection = DriverManager.getConnection(url, user,
password);
// Create a Statement object
Statement statement = connection.createStatement();
// Execute the query
String sqlInsertQuery = "insert into student(sid,sname,sage,saddress)
values(18,'kohli',49,'MI')";
int rowAffected = statement.executeUpdate(sqlInsertQuery);
//process the result
if (rowAffected==1) {
System.out.println("No of rows affected is :: "+rowAffected);
} else {
System.out.println("Not succesfull in insertion...");
}
//close the resources
statement.close();
connection.close();
}
}
++++++++++++++++++++++++++++
Code to execute delete Query
++++++++++++++++++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
public class TestApp {
public static void main(String[] args) throws ClassNotFoundException,
SQLException {
// load and register the driver
Class.forName("com.mysql.cj.jdbc.Driver");
// Establish the Connection
String url = "jdbc:mysql://localhost:3306/pwskillsbatch";
String user = "root";
String password = "root123";
Connection connection = DriverManager.getConnection(url, user,
password);
// Create a Statement object
Statement statement = connection.createStatement();
// Execute the query
String sqlDeleteQuery = "delete from student where sid = 9";
int rowAffected = statement.executeUpdate(sqlDeleteQuery);
//process the result
if (rowAffected==1) {
System.out.println("No of rows deleted are :: "+rowAffected);
} else {
System.out.println("No record found for deletion");
}
//close the resources
statement.close();
connection.close();
}
}
+++++++++++++++++++++
Code for Update Query
+++++++++++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
public class TestApp {
public static void main(String[] args) throws ClassNotFoundException,
SQLException {
// load and register the driver
Class.forName("com.mysql.cj.jdbc.Driver");
// Establish the Connection
String url = "jdbc:mysql://localhost:3306/pwskillsbatch";
String user = "root";
String password = "root123";
Connection connection = DriverManager.getConnection(url, user,
password);
// Create a Statement object
Statement statement = connection.createStatement();
// Execute the query
String sqlUpdateQuery = "update student set sname='sachin' where sid =
10";
int rowAffected = statement.executeUpdate(sqlUpdateQuery);
//process the result
if (rowAffected==1) {
System.out.println("No of rows updated are :: "+rowAffected);
} else {
System.out.println("No record found for upation");
}
//close the resources
statement.close();
connection.close();
}
}
+++++++++++++++++++++++++++++++++++++++++
Industry standard way of writing the code
+++++++++++++++++++++++++++++++++++++++++
package in.pwskills.utility;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
public class JdbcUtil {
static {
// load and register the driver
try {
Class.forName("com.mysql.cj.jdbc.Driver");
} catch (ClassNotFoundException e) {
e.printStackTrace();
}
}
public static Connection getDbConnection() throws SQLException {
// Establish the Connection
String url = "jdbc:mysql://localhost:3306/pwskillsbatch";
String user = "root";
String password = "root123";
return DriverManager.getConnection(url, user, password);
}
public static void closeResources(ResultSet resultSet, Statement statement,
Connection connection)
throws SQLException {
if (resultSet != null)
resultSet.close();
if (statement != null)
statement.close();
if (connection != null)
connection.close();
}
}
TestApp.java
============
package in.pwskills.main;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import in.pwskills.utility.JdbcUtil;
public class TestApp {
public static void main(String[] args) {
//Resources used
Connection connection = null;
Statement statement = null;
ResultSet resultSet = null;
try {
//Getting the connection
connection = JdbcUtil.getDbConnection();
if (connection != null)
statement = connection.createStatement();
if (statement != null)
resultSet = statement.executeQuery("select
sid,sname,sage,saddress from student");
if (resultSet != null) {
System.out.println("SID\tSNAME\tSAGE\tSADDRESS");
while (resultSet.next()) {
System.out.println(resultSet.getInt(1) + "\t" +
resultSet.getString(2) + "\t" + resultSet.getInt(3)
+ "\t" + resultSet.getString(4));
}
}
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
} finally {
//Closing the resources
try {
JdbcUtil.closeResources(resultSet, statement, connection);
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
+++++++++++++++++
PreparedStatement
+++++++++++++++++
=> These statements are used to transfer the query during the compilation only.
=> These statements are also called as Pre-Compiled Query.
=> Performance of these object are high compared to Statement object.
=> In case of PreparedStatement the query will be incomplete and the values will
be injected to the query at the runtime.
=> Values to the PreparedStatement object will be injected using setXXXXX(int
pos,xxxxx value) throws SQLException method.
Syntax ::
insert into tb_name(col1,col2,...) values (?,?,?,?);
select col1,col2,col3,... from tb_name where col1 =?
update table set col2 = ? where coln = ?
delete from table where col = ?
eg#1.
JdbcUtil.java
+++++++++++++
package in.pwskills.utility;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
public class JdbcUtil {
static {
// load and register the driver
try {
Class.forName("com.mysql.cj.jdbc.Driver");
} catch (ClassNotFoundException e) {
e.printStackTrace();
}
}
public static Connection getDbConnection() throws SQLException {
// Establish the Connection
String url = "jdbc:mysql://localhost:3306/pwskillsbatch";
String user = "root";
String password = "root123";
return DriverManager.getConnection(url, user, password);
}
public static void closeResources(ResultSet resultSet, Statement statement,
Connection connection)
throws SQLException {
if (resultSet != null)
resultSet.close();
if (statement != null)
statement.close();
if (connection != null)
connection.close();
}
}
TestApp.java
++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import in.pwskills.utility.JdbcUtil;
public class TestApp {
public static void main(String[] args) {
// Resources used
Connection connection = null;
PreparedStatement pstmt = null;
ResultSet resultSet = null;
Scanner scanner = null;
try {
// Getting the connection
connection = JdbcUtil.getDbConnection();
String sqlInsertQuery = "insert into
student(sid,sname,sage,saddress) values(?,?,?,?)";
if (connection != null)
pstmt = connection.prepareStatement(sqlInsertQuery);
if (pstmt != null) {
scanner = new Scanner(System.in);
System.out.print("Enter the value of sname :: ");
String sname = scanner.next();
System.out.print("Enter the value of sid :: ");
Integer sid = scanner.nextInt();
System.out.print("Enter the value of saddress :: ");
String saddress = scanner.next();
System.out.print("Enter the value of sage :: ");
Integer sage = scanner.nextInt();
// Setting the values for PreparedStatement
pstmt.setInt(1, sid);
pstmt.setString(2, sname);
pstmt.setInt(3, sage);
pstmt.setString(4, saddress);
int rowAffected = pstmt.executeUpdate();
if (rowAffected == 1) {
System.out.println("Insertion succesfull");
} else {
System.out.println("Record not inserted to
database...");
}
}
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
} finally {
// Closing the resources
try {
JdbcUtil.closeResources(resultSet, pstmt, connection);
scanner.close();
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
++++++++++++++++++
Code for Updation
++++++++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import in.pwskills.utility.JdbcUtil;
public class UpdateApp {
public static void main(String[] args) {
// Resources used
Connection connection = null;
PreparedStatement pstmt = null;
ResultSet resultSet = null;
Scanner scanner = null;
try {
// Getting the connection
connection = JdbcUtil.getDbConnection();
String sqlUpdateQuery = "update student set sname = ? where sid =
?";
if (connection != null)
pstmt = connection.prepareStatement(sqlUpdateQuery);
if (pstmt != null) {
scanner = new Scanner(System.in);
System.out.print("Enter the value of sname :: ");
String sname = scanner.next();
System.out.print("Enter the value of sid :: ");
Integer sid = scanner.nextInt();
// Setting the values for PreparedStatement
pstmt.setString(1, sname);
pstmt.setInt(2, sid);
int rowAffected = pstmt.executeUpdate();
if (rowAffected == 1) {
System.out.println("updation succesfull");
} else {
System.out.println("Record not available for updation
with the id:: "+sid);
}
}
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
} finally {
// Closing the resources
try {
JdbcUtil.closeResources(resultSet, pstmt, connection);
scanner.close();
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
++++++++++++++++++
Code for Deletion
+++++++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import in.pwskills.utility.JdbcUtil;
public class DeleteApp {
public static void main(String[] args) {
// Resources used
Connection connection = null;
PreparedStatement pstmt = null;
ResultSet resultSet = null;
Scanner scanner = null;
try {
// Getting the connection
connection = JdbcUtil.getDbConnection();
String sqlDeleteQuery = "delete from student where sid = ? ";
if (connection != null)
pstmt = connection.prepareStatement(sqlDeleteQuery);
if (pstmt != null) {
scanner = new Scanner(System.in);
System.out.print("Enter the value of sid :: ");
Integer sid = scanner.nextInt();
// Setting the values for PreparedStatement
pstmt.setInt(1, sid);
int rowAffected = pstmt.executeUpdate();
if (rowAffected == 1) {
System.out.println("deletion succesfull");
} else {
System.out.println("Record not available for deletion
with the id:: "+sid);
}
}
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
} finally {
// Closing the resources
try {
JdbcUtil.closeResources(resultSet, pstmt, connection);
scanner.close();
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
++++++++++++++++++
Code for Selection
++++++++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import in.pwskills.utility.JdbcUtil;
public class SelectApp {
public static void main(String[] args) {
// Resources used
Connection connection = null;
PreparedStatement pstmt = null;
ResultSet resultSet = null;
Scanner scanner = null;
Integer sid = null;
try {
// Getting the connection
connection = JdbcUtil.getDbConnection();
String sqlSelectQuery = "select sid,sname,sage,saddress from
student where sid = ? ";
if (connection != null)
pstmt = connection.prepareStatement(sqlSelectQuery);
if (pstmt != null) {
scanner = new Scanner(System.in);
System.out.print("Enter the value of sid :: ");
sid = scanner.nextInt();
// Setting the values for PreparedStatement
pstmt.setInt(1, sid);
resultSet = pstmt.executeQuery();
}
if (resultSet != null) {
if (resultSet.next()) {
System.out.println("SID\tSNAME\tSAGE\tSADDRESS");
System.out.println(resultSet.getInt(1) + "\t" +
resultSet.getString(2) + "\t" + resultSet.getInt(3)
+ "\t" + resultSet.getString(4));
} else {
System.out.println("Record not available for the give
id :: "+sid);
}
}
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
} finally {
// Closing the resources
try {
JdbcUtil.closeResources(resultSet, pstmt, connection);
scanner.close();
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
While working with database, we perform the following operations
a. C ----> Create(insert)
b. R ----> Read(select)
c. U ----> Update(updation)
d. D ----> Delete(deletion)
The above mentioned operations we call as "CRUD/CURD/SCUD" operation.
+++++++++++++++++++++++++++
Working with Date Operation
+++++++++++++++++++++++++++
Formats of Date in MySQL :: YYYY-MM-DD
Formats of Date in Oracle :: DD-MM-YY
While writing the program, we expect the date information from the user as per
there timezone,so while writing the code we can write
by keeping particular database in mind, so we following the conversion format to
store the date information in database.
EndUser(Input) --SimpleDateFormat(parse)------> java.util.Date ------->
java.sql.Date
|-> use
preparedStatement and Set Date ----> DB specific format.
+++++++++++++++++++++++++++++++++++++++
Code for Inserting the date in Database
+++++++++++++++++++++++++++++++++++++++
TestApp.java
+++++++++++++
package in.pwskills.main;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import in.pwskills.utility.JdbcUtil;
public class InsertApp {
public static void main(String[] args) {
// Resources used
Connection connection = null;
PreparedStatement pstmt = null;
ResultSet resultSet = null;
Scanner scanner = null;
try {
// Getting the connection
connection = JdbcUtil.getDbConnection();
String sqlInsertQuery = "insert into person(name,dob) values
(?,?)";
if (connection != null)
pstmt = connection.prepareStatement(sqlInsertQuery);
if (pstmt != null) {
scanner = new Scanner(System.in);
System.out.print("Enter the value of sname :: ");
String sname = scanner.next();
System.out.print("Enter the value of dob(dd-mm-yyyy) :: ");
String dob = scanner.next();
SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
Date utilDate = sdf.parse(dob);
java.sql.Date sqlDate = new
java.sql.Date(utilDate.getTime());
// Setting the values for PreparedStatement
pstmt.setString(1, sname);
pstmt.setDate(2, sqlDate);
int rowAffected = pstmt.executeUpdate();
if (rowAffected == 1) {
System.out.println("Insertion succesfull");
} else {
System.out.println("Record not inserted to
database...");
}
}
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
} finally {
// Closing the resources
try {
JdbcUtil.closeResources(resultSet, pstmt, connection);
scanner.close();
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
++++++++++++++++++++++++++++++++++++++++++
Code for Retreiving the data from Database
++++++++++++++++++++++++++++++++++++++++++
=> Database -----> java.sql.Date ------> use SimpleDateFormat(format)----->
String format output(end user)
TestApp.java
============
package in.pwskills.main;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Scanner;
import in.pwskills.utility.JdbcUtil;
public class SelectApp {
public static void main(String[] args) {
// Resources used
Connection connection = null;
PreparedStatement pstmt = null;
ResultSet resultSet = null;
Scanner scanner = null;
String sname = null;
try {
// Getting the connection
connection = JdbcUtil.getDbConnection();
String sqlSelectQuery = "select name,dob from person where name =
?";
if (connection != null)
pstmt = connection.prepareStatement(sqlSelectQuery);
if (pstmt != null) {
scanner = new Scanner(System.in);
System.out.print("Enter the name of the person:: ");
sname = scanner.next();
// Setting the values for PreparedStatement
pstmt.setString(1, sname);
resultSet = pstmt.executeQuery();
}
if (resultSet != null) {
if (resultSet.next()) {
System.out.println("NAME\tDOB");
Date sqlDate = resultSet.getDate(2);
SimpleDateFormat sdf = new SimpleDateFormat("dd-MMMyyy");
String stringDate = sdf.format(sqlDate);
System.out.println(resultSet.getString(1)+"\t"+
stringDate);
} else {
System.out.println("Record not available for the give
name :: "+sname);
}
}
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
} finally {
// Closing the resources
try {
JdbcUtil.closeResources(resultSet, pstmt, connection);
scanner.close();
} catch (SQLException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}
output
Enter the name of the person:: divya
NAME DOB
divya 02-Jan-2001